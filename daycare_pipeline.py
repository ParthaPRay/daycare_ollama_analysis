# daycare_pipeline.py

# DeepFace Backend: opencv', 'ssd', 'dlib', 'mtcnn', 'fastmtcnn', 'retinaface', 'mediapipe', 'yolov8', 'yolov11s', 'yolov11n', 'yolov11m', 'yunet', 'centerface
# VLM: gemma3:4b, qwen2.5vl:7b, qwen2.5vl:3b, moondream:1.8b
# Reasoning Judge: deepseek-r1:8b, deepseek-r1:1.5b, qwen3:8b, qwen3:4b, qwen3:0.6b

import subprocess
import sys
import os
import time

def run_cmd(cmd, success_msg, error_msg):
    print(f"\033[94m[DEBUG] Running: {' '.join(cmd)}\033[0m")
    try:
        result = subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding='utf-8')
        print(f"\033[92m[SUCCESS]\033[0m {success_msg}")
        print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"\033[91m[ERROR]\033[0m {error_msg}")
        print(e.stderr)
        sys.exit(1)

def file_wait(filepath, wait_time=30):
    """Wait up to wait_time seconds for a file to appear."""
    for _ in range(wait_time * 2):
        if os.path.exists(filepath):
            return True
        time.sleep(0.5)
    print(f"\033[91m[ERROR]\033[0m File not found after waiting: {filepath}")
    sys.exit(1)

if __name__ == "__main__":
    # ---- VARIABLES TO EDIT ----
    image_path = "images/image12.jpg"
    yolo_model = "yolo11x.pt"
    deepface_backend = "retinaface" #'opencv', 'ssd', 'dlib', 'mtcnn', 'fastmtcnn', 'retinaface', 'mediapipe', 'yolov8', 'yolov11s', 'yolov11n', 'yolov11m', 'yunet', 'centerface
    vlm_model = "qwen2.5vl:7b" #gemma3:4b, qwen2.5vl:7b, qwen2.5vl:3b, moondream:1.8b
    judge_model = "deepseek-r1:1.5b" #deepseek-r1:8b, deepseek-r1:1.5b, qwen3:8b, qwen3:4b, qwen3:0.6b

    # ---- OUTPUT FILENAMES (autogenerated) ----
    image_base = os.path.splitext(os.path.basename(image_path))[0]
    yolo_output_json = f"yolodeepface_output/{image_base}_yolodeepface.json"
    vlm_output_json = f"vlm_output/{image_base}_vlm.json"

    # ---- STEP 1: YOLO + DeepFace ----
    cmd_yolo = [
        sys.executable, "yolo_deepface.py",
        "--image_path", image_path,
        "--yolo_model", yolo_model,
        "--deepface_backend", deepface_backend
    ]
    run_cmd(cmd_yolo, "YOLO+DeepFace completed.", "YOLO+DeepFace failed.")
    file_wait(yolo_output_json)
    print(f"\033[93m[INFO]\033[0m YOLO+DeepFace output: {yolo_output_json}")

    # ---- STEP 2: Qwen VLM ----
    cmd_vlm = [
        sys.executable, "vlm.py",
        "--image_path", image_path,
        "--model", vlm_model
    ]
    run_cmd(cmd_vlm, "VLM completed.", "VLM failed.")
    file_wait(vlm_output_json)
    print(f"\033[93m[INFO]\033[0m VLM output: {vlm_output_json}")

    # ---- STEP 3: Judge Module ----
    cmd_judge = [
        sys.executable, "judge_module.py",
        "--yolo_output_json", yolo_output_json,
        "--vlm_output_json", vlm_output_json,
        "--judge_model", judge_model
    ]
    run_cmd(cmd_judge, "Judge reasoning completed.", "Judge reasoning failed.")

    print("\033[96m[PIPELINE COMPLETED SUCCESSFULLY]\033[0m")

